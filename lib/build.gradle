/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */
 
 
 /*Sobre agregar dependencias en Gradle
 
 Las dos principales formas de declaraci�n de dependencias son
 
 - En compilaci�n
 - En tiempo de ejecuci�n (runtime)
 
 Los 5 tipos principales de declaraci�n de dependencias son los siguientes:
 
 
 implementation -> Indica que la depe ndencia est� disponible en compilaci�n.
 
 
 api -> Declara dependencias indirectas.
        Indica a los componentes que dependen
        de esta librer�a que esta se encuentra
        disponible.
 
 
 compileOnly -> Cuando utilizamos librer�as como
                anotaciones durante compilaci�n.
 
 
 compileOnlyApi -> Cuando utilizamos apis que se 
                   ejecutan en alg�n contenedor y
                   que nuestra aplicaci�n utiliza
                   en tiempo de ejecuci�n.
 
 
 runTimeOnly -> Las dependencias y librer�as solo
                ser�n visibles en tiempo de ejecuci�n. 
 */
 

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library' 
    id "org.springframework.boot" version "2.6.6"
    
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.3'
    
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc
    
    
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.6.6'
    
    
  
    
    
    
    // JPA
    implementation('org.springframework.boot:spring-boot-starter-web')
	//implementation('org.springframework.boot:spring-boot-starter-data-jpa')	
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.6.6'
	
    
    
    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa
    implementation group: 'org.springframework.data', name: 'spring-data-jpa', version: '2.6.3'
    
    
    // https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    
    
    
     
    
    
    //  Lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	
	// JPA	
	// https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa
    implementation group: 'org.springframework.data', name: 'spring-data-jpa', version: '2.6.3'    
   
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
